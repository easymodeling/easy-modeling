name: RELEASE

on:
  push:
    tags:
      - '*'

env:
  OSSRH_USERNAME: 'OSSRH_USERNAME'
  OSSRH_PASSWORD: 'OSSRH_PASSWORD'

jobs:
  cross-env-verify:
    name: "Test on ${{ matrix.os }} with JDK ${{ matrix.java }}"
    strategy:
      matrix:
        os: [ 'ubuntu-22.04', 'macos-12', 'windows-2022' ]
        java: [ '8', '11', '17', '18' ]
    runs-on: '${{ matrix.os }}'
    timeout-minutes: 15
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
      - uses: ./.github/actions/set-up-jdk
        with:
          jdk-version: '${{ matrix.java }}'
      - name: 'Run test'
        run: ./gradlew clean test

  sonarqube:
    name: Sonarqube Report
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/set-up-jdk
        with:
          jdk-version: '11'
      - uses: ./.github/actions/sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  version:
    name: Check Artifacts Version
    runs-on: ubuntu-latest
    needs:
      - cross-env-verify
      - sonarqube
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
      - uses: ./.github/actions/set-up-jdk
      - name: 'Artifact and Release Version'
        run: |
          GRADLE_VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
          GIT_TAG=${GITHUB_REF#refs/*/}
          [[ "$GRADLE_VERSION" == "$GIT_TAG"* ]]
          echo "::set-output name=RELEASE_VERSION::${GIT_TAG}"
          echo "::set-output name=ARTIFACT_VERSION::${GRADLE_VERSION}"
    outputs:
      RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
      ARTIFACT_VERSION: ${{ steps.release-version.outputs.ARTIFACT_VERSION }}

  publish:
    name: Publish Artifact
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - version
    env:
      OSSRH_USERNAME: ${{secrets.OSSRH_USERNAME}}
      OSSRH_PASSWORD: ${{secrets.OSSRH_PASSWORD}}
      OSSRH_URL: ${{secrets.OSSRH_URL}}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
      - uses: ./.github/actions/set-up-jdk
      - uses: ./.github/actions/publish-artifact
        with:
          signing-secret-key-ring-b64: ${{ secrets.SIGNING_SECRET_KEY_RING_B64 }}
          signing-key-id: ${{ secrets.SIGNING_KEY_ID }}
          signing-key-password: ${{ secrets.SIGNING_KEY_PASSWORD }}

  snapshot:
    name: "SNAPSHOT: Verify Artifact"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - publish
      - version
    if: ${{ endsWith(needs.version.outputs.ARTIFACT_VERSION, '-SNAPSHOT') }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'zulu'
      - name: 'Run test with new released artifact snapshot'
        run: ./gradlew clean -Partifact-verification :artifact-verification:build

  release-branch:
    name: "Create Release Branch"
    runs-on: ubuntu-latest
    needs:
      - snapshot
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
      - uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: "release/${{ needs.version.outputs.RELEASE_VERSION }}"
          sha: "${{ env.GITHUB_SHA }}"

  release:
    name: "RELEASE: Draft"
    runs-on: ubuntu-latest
    needs:
      - publish
      - version
    if: ${{ !endsWith(needs.version.outputs.ARTIFACT_VERSION, '-SNAPSHOT') }}
    steps:
      - name: 'Create release draft'
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: true
          token: ${{ github.token }}
